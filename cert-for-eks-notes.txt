import boto3
from botocore.exceptions import ClientError
from flask import Flask, request, jsonify
import base64
import json
import os
from kubernetes import client, config
from vcert import (Connection, Authentication)
import conjur
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

def get_venafi_credentials():
    # Initialize Conjur client with OIDC authentication
    conjur_client = conjur.Client(
        url=os.environ['CONJUR_URL'],
        account=os.environ['CONJUR_ACCOUNT'],
        oidc_token=get_oidc_token()
    )
    
    # Fetch Venafi credentials from Conjur
    venafi_token = conjur_client.get_secret('venafi/tpp/apikey')
    venafi_url = conjur_client.get_secret('venafi/tpp/url')
    
    return venafi_url, venafi_token

def get_oidc_token():
    # Get OIDC token from pod's service account
    with open('/var/run/secrets/eks.amazonaws.com/serviceaccount/token') as f:
        return f.read()

def init_aws_client():
    # AWS client will use IRSA (IAM Roles for Service Accounts) automatically
    return boto3.client('secretsmanager')

@app.route('/mutate', methods=['POST'])
def webhook():
    request_info = request.get_json()
    
    try:
        cert_name = request_info['request']['object']['metadata']['name']
        namespace = request_info['request']['object']['metadata']['namespace']
        
        # Initialize Venafi client with credentials from Conjur
        venafi_url, venafi_token = get_venafi_credentials()
        venafi_connection = Connection(
            url=venafi_url,
            token=venafi_token
        )
        
        # Fetch certificate from Venafi
        cert_data = fetch_from_venafi(venafi_connection, cert_name, namespace)
        
        # Store in AWS Secrets Manager
        store_in_aws_secrets(cert_name, namespace, cert_data)
        
        return jsonify({
            "apiVersion": "admission.k8s.io/v1",
            "kind": "AdmissionReview",
            "response": {
                "uid": request_info['request']['uid'],
                "allowed": True
            }
        })
    
    except Exception as e:
        logger.error(f"Error processing certificate: {str(e)}")
        return jsonify({
            "apiVersion": "admission.k8s.io/v1",
            "kind": "AdmissionReview",
            "response": {
                "uid": request_info['request']['uid'],
                "allowed": False,
                "status": {
                    "message": str(e)
                }
            }
        }), 500

def fetch_from_venafi(connection, cert_name, namespace):
    try:
        cert = connection.retrieve_by_thumbprint(cert_name)
        return {
            'certificate': cert.cert,
            'private_key': cert.key,
            'chain': cert.chain
        }
    except Exception as e:
        logger.error(f"Error fetching from Venafi: {str(e)}")
        raise

def store_in_aws_secrets(cert_name, namespace, cert_data):
    try:
        secrets_client = init_aws_client()
        secret_name = f"certificates/{namespace}/{cert_name}"
        
        secret_value = {
            'certificate': cert_data['certificate'],
            'private_key': cert_data['private_key'],
            'chain': cert_data['chain']
        }
        
        # Create or update secret
        try:
            secrets_client.create_secret(
                Name=secret_name,
                SecretString=json.dumps(secret_value)
            )
        except ClientError as e:
            if e.response['Error']['Code'] == 'ResourceExistsException':
                secrets_client.update_secret(
                    SecretId=secret_name,
                    SecretString=json.dumps(secret_value)
                )
            else:
                raise
                
        logger.info(f"Successfully stored certificate {cert_name} in AWS Secrets Manager")
    except Exception as e:
        logger.error(f"Error storing in AWS Secrets Manager: {str(e)}")
        raise

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)